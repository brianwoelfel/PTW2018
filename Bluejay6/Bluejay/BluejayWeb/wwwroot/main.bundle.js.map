{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/ag-grid/filter-sort.service.ts","./src/app/app-routing.module.ts","./src/app/app.module.ts","./src/app/component/app.component.css","./src/app/component/app.component.html","./src/app/component/app.component.ts","./src/app/component/state-list.component.css","./src/app/component/state-list.component.html","./src/app/component/state-list.component.ts","./src/app/component/zip-list.component.css","./src/app/component/zip-list.component.html","./src/app/component/zip-list.component.ts","./src/app/service/state.service.ts","./src/app/service/zip.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","import { Injectable } from '@angular/core';\r\nimport { FilterModel } from './filter-model';\r\nimport { SortItem } from './sort-item';\r\nimport { FilterItem} from './filter-item';\r\nimport { FilterSortModel } from './filter-sort-model';\r\nimport { FilterSortResponse } from './filter-sort-response';\r\n\r\n@Injectable()\r\nexport class FilterSortService {\r\n\r\n    constructor() { }\r\n\r\n\t/*\r\n\t * Convert ag-grid sort/filter data into a popoulated \r\n\t * TypeScript object of custom type FilterSortModel\r\n\t * \r\n\t * Assuming you are using ag-grid Angular for front end data grids\r\n\t * and using BoxTurtleCs C# MVC controllers to produce data (or something similar),\r\n\t * use this method to package up all requested sorts, filters, and pagination\r\n\t * that ag-grid events produce into easy to use TypeScript objects that we can pass \r\n\t * along back to backend controllers.  By converting from ag-grid's syntax into \r\n\t * these objects, it's easier to push TypeScript front-end objects to C# backend\r\n\t * objects.  BoxTurtleCs project has C# objects with the same structure, then\r\n\t * it feeds it into dynamic LINQ for final datatabase queries.\r\n\t *\r\n\t * Example:\r\n\t *  // Assume we're in an ag-grid Angular component \r\n\t *  // set all the grid options\r\n\t * this.gridOptions.onGridReady = function (event) {\r\n\t * \tvar dataSource = {\r\n\t * \t\trowCount: null, // behave as infinite scroll\r\n\t *      // ag-grid will call this when it wants data\r\n\t * \t\tgetRows: function (params) {\r\n\t *          // Call this service, and pass it ag-grid data\r\n\t *\t\t\t// and you will get back FilterSortModel object with stuff filled out\r\n\t * \t\t\tlet myFilterSortModel: FilterSortModel = filterSortService.getFilterSortModelFromAgGridParm(params);\r\n\t *\t\t\t// Using standard Angular techniques, call a data service that accepts the filter model\r\n\t *\t\t\t// and returns a promise to return data\r\n\t * \t\t\tmyDataService.filterSort(myFilterSortModel).then(\r\n\t * \t\t\t\tfilterSortResponse => {\r\n\t * \t\t\t\t\tparams.successCallback(filterSortResponse.rows, filterSortResponse.totalCount);\r\n\t * \t\t\t\t});\r\n\t * \t\t}\r\n\t * \t}\r\n\t *  // Feed this object to ag-grid\r\n\t * \tevent.api.setDatasource(dataSource);\r\n\t *\r\n\t */\r\n    getFilterSortModelFromAgGridParm(params): FilterSortModel {\r\n\r\n        let myFilterModel: FilterModel = {};\r\n        for (let colId in params.filterModel) {\r\n            let theirFilterItem: any = params.filterModel[colId];\r\n            let myFilterItem: FilterItem = theirFilterItem as FilterItem;\r\n            myFilterModel[colId] = myFilterItem;\r\n        }\r\n\r\n        let mySortModel: SortItem[] = [];\r\n        for (let theirSortItemX of params.sortModel) {\r\n            let theirSortItemY: any = theirSortItemX;\r\n            let mySortItem: SortItem = theirSortItemY as SortItem;\r\n            mySortModel.push(mySortItem);\r\n        }\r\n\r\n        let myFilterSortModel: FilterSortModel = {\r\n            filterModel: myFilterModel,\r\n            sortModel: mySortModel,\r\n            startRow: params.startRow,\r\n            endRow: params.endRow\r\n        };\r\n\r\n        return myFilterSortModel;\r\n    }\r\n\r\n    addLineNumbers(filterSortModel: FilterSortModel, filterSortResponse: FilterSortResponse) {\r\n        let startRow: number = 0;\r\n        if (filterSortModel != null) {\r\n            startRow = filterSortModel.startRow;\r\n        }\r\n        for (let i = 0; i < filterSortResponse.rows.length; i++) {\r\n            filterSortResponse.rows[i].lineNumber = startRow + i + 1;\r\n            // Every row gets a checkbox column, even if it's not used\r\n            filterSortResponse.rows[i].checkbox = null;\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/ag-grid/filter-sort.service.ts","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AppComponent } from './component/app.component';\r\nimport { ZipListComponent } from './component/zip-list.component';\r\nimport { StateListComponent } from './component/state-list.component';\r\n\r\nconst routes: Routes = [\r\n\t{ path: '', component: StateListComponent }, \r\n\t{ path: 'zip', component: ZipListComponent }, \r\n\t{ path: 'state', component: StateListComponent }, \r\n];\r\n\r\n@NgModule({ \r\n    imports: [\r\n\t\tRouterModule.forRoot(routes)\r\n\t],\r\n    exports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class AppRoutingModule { } \r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-routing.module.ts","// Import standard required angular libraries\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\n// Import the extra third party libraries \nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { AgGridModule } from 'ag-grid-angular/main';\n// Import our primary component (like a master page)\nimport { AppComponent } from './component/app.component';\n// Import our components\nimport { ZipListComponent } from './component/zip-list.component';\nimport { StateListComponent } from './component/state-list.component';\n// Import our services\nimport { ZipService } from './service/zip.service';\nimport { StateService } from './service/state.service';\n// Import our routing table\nimport { AppRoutingModule } from './app-routing.module';\n\n@NgModule({\n\tdeclarations: [\n\t\t// Make all of our components available to Angular\n\t\tAppComponent,\n\t\tZipListComponent,\n\t\tStateListComponent\n\t],\n\timports: [\n\t\t// Import standard libraries and make available to individual components\n\t\tBrowserModule,\n\t\tHttpModule,\n\t    AppRoutingModule,\n\t\tReactiveFormsModule,\n\t\tFormsModule,\n\t\t// Import our routing list\n\t\tAppRoutingModule,\n\t\t// Import angular bootstrap\n\t\tNgbModule.forRoot(),\n    // Import ag-grid, note the special syntax\n\t\tAgGridModule.withComponents([]),\n\t],\n\tproviders: [\n\t\t// Make our services available for dependency injection\n\t\tZipService,\n\t\tStateService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","module.exports = \"\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/app.component.css\n// module id = ./src/app/component/app.component.css\n// module chunks = main","module.exports = \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark mb-4\\\">\\r\\n  <button type=\\\"button\\\" class=\\\"navbar-toggler\\\" aria-controls=\\\"navbarCollapse\\\" (click)=\\\"isExpanded = !isExpanded\\\" [attr.aria-expanded]=\\\"!isExpanded\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">Bluejay</a>\\r\\n\\r\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarContent\\\" [ngbCollapse]=\\\"!isExpanded\\\">\\r\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n      <!-- START_MENU -->\\r\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/state\\\">State</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/zip\\\">Zip</a>\\r\\n      </li>\\r\\n      <!-- END_MENU -->\\r\\n    </ul>\\r\\n  </div>\\r\\n</nav>\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\\r\\n\\r\\n<footer class=\\\"footer \\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <p class=\\\"text-muted\\\">Site Footer, copyright, contact, etc.</p>\\r\\n  </div>\\r\\n</footer>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/app.component.html\n// module id = ./src/app/component/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/app.component.ts","module.exports = \"\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/state-list.component.css\n// module id = ./src/app/component/state-list.component.css\n// module chunks = main","module.exports = \"<h2>State List</h2>\\r\\n\\r\\n<div style=\\\"width: 1150px;\\\">\\r\\n\\t<ag-grid-angular #agGrid style=\\\"width: 100%; height: 400px;\\\" class=\\\"ag-fresh\\\"\\r\\n\\t\\t\\t\\t [gridOptions]=\\\"gridOptions\\\">\\r\\n\\t</ag-grid-angular>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/state-list.component.html\n// module id = ./src/app/component/state-list.component.html\n// module chunks = main","import 'rxjs/add/operator/switchMap';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport { GridOptions, IGetRowsParams } from 'ag-grid';\nimport { StateService } from '../service/state.service';\nimport { State } from '../model/state';\n\n@Component({\n    selector: 'state-list',\n    templateUrl: './state-list.component.html',\n    styleUrls: ['./state-list.component.css']\n})\nexport class StateListComponent implements OnInit {\n    private gridOptions: GridOptions;\n\n    constructor(\n        private stateService: StateService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) {\n        // Some weird thing with load order, must explicitly supply\n        // services here and not rely on this.statusReportService\n        this.loadGridOptions(stateService);\n    }\n\n    ngOnInit(): void {\n    }\n\n    loadGridOptions(stateService: StateService): void {\n        this.gridOptions = <GridOptions>{};\n        this.gridOptions.columnDefs = [\n\t\t\t{\n\t\t\t\theaderName: 'Code',\n\t\t\t\tfield: 'code',\n\t\t\t\twidth: 80,\n\t\t\t\tfilter: 'text',\n\t\t\t\ttooltipField: 'code'\n\t\t\t},\n\t\t\t{\n\t\t\t\theaderName: 'Name',\n\t\t\t\tfield: 'name',\n\t\t\t\twidth: 200,\n\t\t\t\tfilter: 'text',\n\t\t\t\ttooltipField: 'name'\n\t\t\t}\n        ];\n\n\t\t// Load all data to the client, no server side paging.\n\t\t// Set basic grid options\n        this.gridOptions.floatingFilter = true;\n        this.gridOptions.debug = false;\n        this.gridOptions.enableColResize = true;\n        this.gridOptions.suppressRowClickSelection = true;\n        this.gridOptions.rowModelType = 'normal';\n        this.gridOptions.maxConcurrentDatasourceRequests = 2;\n        this.gridOptions.deltaRowDataMode = true;\n\t\tthis.gridOptions.enableSorting = true;\n\n\t\t// Tell ag-grid how to uniquely identify each column\n\t\t// so it can manage pagination and filtering correctly\n\t\tthis.gridOptions.getRowNodeId = function(item) { return item.stateId; };\n\n\t\t// After the javascript loads and ag-grid is \n\t\t// woken up, hit the service to get the data\n        this.gridOptions.onGridReady = function (event:any) {\n            stateService.list().then(\n                myData => {\n\t\t\t\t\t// Call ag-grid API to supply an array of objects\n                    event.api.setRowData(myData);\n                });\n        }\n\n   \t    // Hyperlinks in grid force Angular SPA reloads, so we catch click events instead.\n        let angularComponentPtr: StateListComponent = this;\n        this.gridOptions.onCellClicked = function (params:any) {\n            if (params.colDef.field == \"stateId\") {\n                angularComponentPtr.router.navigate([`/state/${params.data.stateId}`]);\n            }\n        };\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/state-list.component.ts","module.exports = \"\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/zip-list.component.css\n// module id = ./src/app/component/zip-list.component.css\n// module chunks = main","module.exports = \"<h2>Zip List</h2>\\r\\n\\r\\n<div style=\\\"width: 1150px;\\\">\\r\\n\\t<ag-grid-angular #agGrid style=\\\"width: 100%; height: 400px;\\\" class=\\\"ag-fresh\\\"\\r\\n\\t\\t\\t\\t [gridOptions]=\\\"gridOptions\\\">\\r\\n\\t</ag-grid-angular>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/zip-list.component.html\n// module id = ./src/app/component/zip-list.component.html\n// module chunks = main","import 'rxjs/add/operator/switchMap';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport { GridOptions, IGetRowsParams } from 'ag-grid';\nimport { FilterSortModel } from '../ag-grid/filter-sort-model';\nimport { FilterSortService } from '../ag-grid/filter-sort.service';\nimport { ZipService } from '../service/zip.service';\nimport { Zip } from '../model/zip';\n\n@Component({\n    selector: 'zip-list',\n    templateUrl: './zip-list.component.html',\n    styleUrls: ['./zip-list.component.css'],\n\tproviders: [FilterSortService]\n})\nexport class ZipListComponent implements OnInit {\n    private gridOptions: GridOptions;\n\n    constructor(\n        private zipService: ZipService,\n        private route: ActivatedRoute,\n        private router: Router,\n            private filterSortService: FilterSortService\n    ) {\n        // Some weird thing with load order, must explicitly supply\n        // services here and not rely on this.statusReportService\n        this.loadGridOptions(zipService, filterSortService);\n    }\n\n    ngOnInit(): void {\n    }\n\n    loadGridOptions(zipService: ZipService, filterSortService: FilterSortService): void {\n        this.gridOptions = <GridOptions>{};\n        this.gridOptions.columnDefs = [\n\t\t\t{\n\t\t\t\theaderName: 'Zip',\n\t\t\t\tfield: 'zipcode',\n\t\t\t\twidth: 80,\n\t\t\t\tfilter: 'text',\n\t\t\t\ttooltipField: 'zip'\n\t\t\t},\n\t\t\t{\n\t\t\t\theaderName: 'City',\n\t\t\t\tfield: 'city',\n\t\t\t\twidth: 200,\n\t\t\t\tfilter: 'text',\n\t\t\t\ttooltipField: 'zip'\n\t\t\t},\n\t\t\t{\n\t\t\t\theaderName: 'State',\n\t\t\t\tfield: 'state',\n\t\t\t\twidth: 80,\n\t\t\t\tfilter: 'text',\n\t\t\t\ttooltipField: 'zip'\n\t\t\t}\n        ];\n\n\t\t// Infinite scrolling with paging and filtering and sorting\n        this.gridOptions.rowModelType = 'infinite';\n        this.gridOptions.floatingFilter = true;\n        this.gridOptions.debug = false;\n        this.gridOptions.enableServerSideSorting = true;\n        this.gridOptions.enableServerSideFilter = true;\n        this.gridOptions.enableColResize = true;\n        this.gridOptions.rowSelection = 'single';\n        this.gridOptions.rowDeselection = true;\n        this.gridOptions.maxConcurrentDatasourceRequests = 2;\n        this.gridOptions.paginationPageSize = 1;\n        this.gridOptions.infiniteInitialRowCount = 1;\n        \n\t\tthis.gridOptions.getRowNodeId = function(item) { return item.id; };\n\n\t\tthis.gridOptions.onGridReady = function (event) {\n\n            var dataSource = {\n                rowCount: null, // behave as infinite scroll\n                getRows: function (params: IGetRowsParams) {\n\t\t\t\t\t// Get the filter and sort settings requested by user\n                    let myFilterSortModel: FilterSortModel = filterSortService.getFilterSortModelFromAgGridParm(params);\n\t\t\t\t\t// Ask the server for matching data\n\t\t\t\t\tzipService.filterSort(myFilterSortModel).then(\n                          filterSortResponse => {\n                              filterSortService.addLineNumbers(myFilterSortModel, filterSortResponse);\n                              params.successCallback(filterSortResponse.rows, filterSortResponse.totalCount);\n                          });\n                }\n            }\n            event.api.setDatasource(dataSource);\n\n        };\n   \t    // Hyperlinks in grid force Angular SPA reloads, so we catch click events instead.\n        let angularComponentPtr: ZipListComponent = this;\n        this.gridOptions.onCellClicked = function (params:any) {\n            if (params.colDef.field == \"zipId\") {\n                angularComponentPtr.router.navigate([`/zip/${params.data.zipId}`]);\n            }\n        };\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/zip-list.component.ts","import { Injectable }    from '@angular/core';\r\nimport { Http, Headers, RequestOptions } from '@angular/http';\r\nimport { State } from '../model/state';\r\n\r\n\r\n@Injectable()\r\nexport class StateService  {\r\n\r\n\tprivate headers = new Headers({ 'Content-Type': 'application/json' });\r\n\tprivate options = new RequestOptions({headers: this.headers});\r\n\tprivate baseUrl = \"/api/state\";\r\n\r\n\tconstructor(\r\n\t\tprivate http: Http\r\n\t\t) {}\r\n\r\n\r\n\tlist(): Promise<State[]> {\r\n\t\treturn this.http.get(`${this.baseUrl}`)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(response => response.json() as State[])\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tget(id: number): Promise<State> {\r\n\t\treturn this.http.get(`${this.baseUrl}/${id}`)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(response => response.json() as State)\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n    public handleError(error: any): Promise<any> {\r\n        console.error('An error occurred', error); // for demo purposes only\r\n        return Promise.reject(error.message || error);\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/state.service.ts","import { Injectable }    from '@angular/core';\r\nimport { Http, Headers, RequestOptions } from '@angular/http';\r\nimport { Zip } from '../model/zip';\r\nimport { FilterSortModel } from '../ag-grid/filter-sort-model';\r\nimport { FilterSortResponse } from '../ag-grid/filter-sort-response';\r\n\r\n\r\n@Injectable()\r\nexport class ZipService  {\r\n\r\n\tprivate headers = new Headers({ 'Content-Type': 'application/json' });\r\n\tprivate options = new RequestOptions({headers: this.headers});\r\n\tprivate baseUrl = \"/api/zip\";\r\n\r\n\tconstructor(\r\n\t\tprivate http: Http\r\n\t\t) {}\r\n\r\n\r\n\tlist(): Promise<Zip[]> {\r\n\t\treturn this.http.get(`${this.baseUrl}`)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(response => response.json() as Zip[])\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tget(id: number): Promise<Zip> {\r\n\t\treturn this.http.get(`${this.baseUrl}/${id}`)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(response => response.json() as Zip)\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tfilterSort(filterSortModel: FilterSortModel): Promise<FilterSortResponse> {\r\n\t\treturn this.http.post(`${this.baseUrl}/FilterSort`, JSON.stringify(filterSortModel), this.options)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(response => response.json() as FilterSortResponse)\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n    public handleError(error: any): Promise<any> {\r\n        console.error('An error occurred', error); // for demo purposes only\r\n        return Promise.reject(error.message || error);\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/zip.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}